version: '2.1'


services: 
  ProductMicroservice:
    image: productmicroservice
    restart: always
    build: .
    ports:
      - "8083:8083"
    networks:
      - product-net
    depends_on:
      - kafka
      - mysqldb
      - zookeeper
    links:
      - kafka
    environment:
      MYSQL_HOST: mysqldb
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_PORT: 3306
      KAFKA_HOST: 127.0.0.1
      KAFKA_PORT: 9092
      KAFKA_TOPIC: producttopic
      
  mysqldb: 
    image: mysql:8.0.28
    restart: unless-stopped
    container_name: mysqldb
    ports: 
      - "3307:3306"
    cap_add:
      - SYS_NICE
    networks:
      - product-net
    environment:
      MYSQL_DATABASE: dbpoc
      MYSQL_ROOT_PASSWORD: root  
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    restart: unless-stopped
    networks:
      - product-net
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: wurstmeister/kafka:2.11-1.1.1
    container_name: kafka
    hostname: kafka
    links: 
     - zookeeper
    networks:
      - product-net
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9095
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CREATE_TOPICS: "producttopic:1:1"
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
networks:
    product-net:
      driver: bridge   