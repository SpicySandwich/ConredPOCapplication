<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title type="html">Getting started with Java 18</title><link rel="alternate" href="http://www.mastertheboss.com/java/upcoming-news-from-java-18/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/java/upcoming-news-from-java-18/</id><updated>2022-03-26T11:09:00Z</updated><content type="html">Java 18 is finally available for download! In this article we will learn some of the most interesting Enhancement Proposals (JEPs) which are now available in the JDK. Installing Java 18 Firstly, let’s download the Java 18 platform from https://jdk.java.net/18/ Choose the version for your Operating System. Then, unpack it on your machine and set ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title type="html">How to inspect a Thread Dump like a pro</title><link rel="alternate" href="http://www.mastertheboss.com/java/how-to-inspect-a-thread-dump-like-a-pro/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/java/how-to-inspect-a-thread-dump-like-a-pro/</id><updated>2022-03-25T15:41:09Z</updated><content type="html">This article will guide you in troubleshooting Java application by analysing a Thread dump with the instruments available in the JDK. We will also learn some tools to simplify our analysis. Java has mechanisms for analyzing the state of all threads of an application at a given time: Thread dumps. A thread dump is a ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title type="html">COMPLEX KIE SERVER TESTS AUTOMATION PART 3: SMART ROUTER NETWORK ISSUES</title><link rel="alternate" href="https://blog.kie.org/2022/03/smart-router.html" /><author><name>Gonzalo Muñoz Fernández</name></author><id>https://blog.kie.org/2022/03/smart-router.html</id><updated>2022-03-25T10:10:58Z</updated><content type="html">Following Murphy’s Law, whatever you do not test against will happen (M. Nygard) TL ; DR * KIE Smart Router resilience -against network issues- needs to be tested in an automated way * Testcontainers and Toxiproxy are perfect tools for easing these complex tests * Build KIE Smart Router temporary image from sources by means of Dockerfile * Parameterize tests and do not use sleep-before-check (polling is faster and more reliable) * Adopt this new motto: “whatever you do not test against, will happen” MOTIVATION: NETWORK WILL FAIL SOONER THAN LATER Modern systems are mainly distributed and connectivity is a key part of their design and operation. However, as quality-enthusiasts, we realize that it is fairly complex to test connection issues in a deterministic and automated manner, because: * involves multiple components with their interactions. * networking is built over abstractions.  * connection failures are unpredictable by nature.  In the following article, the third of a series about complex automation testing with KIE Server (see and ), we will focus on the to see how we can assure its reliability and robustness against one of the most important resilience killers: the network issues. KIE Smart Router is a component that acts as a gateway: * hides the topology of the different KIE servers to their clients, forwarding requests, and aggregating responses into a single one before coming back. * is really useful in dynamic deployment environments where the client is agnostic about KIE Servers distribution. * handles multiple connections and has implemented stability patterns (like circuit-breaker) to cope with connection error scenarios.  Let’s assume it: network issues are inevitable. Sooner or later will happen and waiting for a critical outage in production to find out how the system will perform is, without a shadow of a doubt, a recipe for pain. This is the main motivation of present work: anticipate the disaster by writing automated tests, simulating common kinds of network failures to prove the KIE Smart Router resilience. CIRCUIT BREAKER PATTERN FOR NETWORK ISSUES KIE Smart Router implements the well-known when there is a connection loss. The goal of this mechanism is to fail fast in order to prevent further consequences. Let’s see briefly how it works because later we will test it thoroughly.  The routing table is the brain of the Smart Router. Consequently, it contains the relationships among * containers (identified by an alias as well as group-artifact-version) and * server-ids (logical names in the network) with * server locations needed for redirection. There are two ways to populate this table: * By manual operation * Automatically, each KIE Server at startup will self-register into the Smart Router by passing its own id and location.   When a connection issue happens, the system immediately updates this routing table by removing the location of the failing KIE server. Open circuit! Smart router won’t forward any request to that point of failure to guard the system against cascading errors and slow responses. Apart from this, new requests are going to be balanced to another working server for that container (if provisioned). Next, the KIE Smart Router spawns a different thread of execution for periodically pinging the failing KIE Server until it reaches a maximum number of configured retries. When one of them succeeds (server connection is back again), the location is annotated again in the routing table, ready for more routine operation. Closed-circuit! NETWORK ISSUES TESTING SETUP Once we have introduced our testing scenario, let’s see the setup for putting in place the resilience test cases. Similarly to other examples brought up in this series, we will take advantage of containerized applications and library and utilities. The following figure depicts the initial configuration. Firstly, we create a network containing several KIE servers (one of them can act as a controller) connected to the KIE Smart Router with a secure/non-secure connection. Each box represents a Linux container that exposes a port to the network: * Secured KIE Servers: port 8443 * Non-secured KIE Servers: port 8080 * KIE Smart Router: port 9000 Moreover, each KIE Server deploys a different business application (kjar) in their respective KIE containers. Be aware of the different meaning of the word “container” here: the self-contained environments to run business applications. KIE containers are identified by a Group-Artifact-Version and/or alias. All of these elements comprise the System-Under-Test (SUT). In front of it, there’s our test suite acting as a client application.  DO TESTING BY PROXY Now, we want to provoke network issues into this setup in a controlled and deterministic manner from the client. The way we’ve chosen to do it is by means of “Toxiproxy” containers. is an open-source library for simulating abnormal network conditions (called toxics).  These toxics cause connection failures emulating real network issues like connection loss, poor bandwidth, timeouts, connection reset by peer, high latency and jitter, sliced data into multiple smaller packets et others. As you can see in the figure, the Toxiproxy container is a proxy that intercepts all the traffic between the KIE Smart Router and the KIE server (upstream and downstream). It exposes port 8666 to the network. It can simulate java.net exceptions like these (which fail immediately, so great for not making the tests too long): Java ExceptionToxicjava.net.SocketException: Unexpected end of file from servertimeout, limitdatajava.net.SocketException: Connection resetresetPeerjavax.net.ssl.SSLHandshakeException: Remote host terminated the handshaketimeout, limitdatajavax.net.ssl.SSLException: Connection resetresetPeer TOXIPROXIES IN THE MIDDLE OF THE WIRE We can initialize Toxiproxy in the code as shown below. Along with the out-of-the-box Shopify image, we will provide a shared network, network alias, and the log consumer to print out its logs: @Container public static ToxiproxyContainer toxiproxy = new ToxiproxyContainer(DockerImageName.parse("ghcr.io/shopify/toxiproxy:2.4.0") .asCompatibleSubstituteFor("shopify/toxiproxy")) .withNetwork(network) .withNetworkAliases(TOXIPROXY_NETWORK_ALIAS) .withLogConsumer(new Slf4jLogConsumer(logger).withPrefix("TOXIPROXY-1")); Toxyproxy will proxy the target container by invoking: proxy1 = toxiproxy.getProxy(kieServer1, KIE_HTTPS_PORT); proxy3 = toxiproxy3.getProxy(kieServer3, KIE_PORT); At this point, you might be wondering "ok, that’s the way Toxiproxy reaches the KIE server, but how should I configure the Smart Router to get to the Toxiproxy?"  Indeed, that’s a very good question. In this case, with self-registering, it’s the KIE server that sends its location (KIE_SERVER_LOCATION) to be populated into the routing table.   When creating the KIE Server, we pass this Environment variable: withEnv("KIE_SERVER_LOCATION", args.get("KIE_SERVER_LOCATION_"+nodeName)+"/kie-server/services/rest/server"); Where KIE_SERVER_LOCATION_node1/2/3 are defined as system properties (in the pom.xml or they could be overridden at launch time) org.kie.samples.server.location.node1 = https://toxiproxy:8666 org.kie.samples.server.location.node2 = https://kie-server-node2:8443 org.kie.samples.server.location.node3 = http://toxiproxy3:8666 To sum up, those KIE servers behind the Toxiproxy will pass their proxy network addresses. CONTAINERS ALL AROUND So, these are the containers in place and their origin: image contains KIE Server, Controller, and Business Central, meanwhile is a lighter image with just the KIE Server. Both are available to download from . After that, we will create temporary images from them just for testing (a.k.a. images-on-the-fly) including business applications and the rest of the needed configuration. Same for the KIE Smart Router image, but in this case, we do have to create it from scratch (no community binaries for it). Do not panic, KIE is an open-source initiative and we can generate all that we need by instructing a Dockerfile. GENERATING THE KIE SMART ROUTER IMAGE Dockerfile is like the instructions manual to build an image. It’s flexible enough to layer and skip repeated steps if nothing forces it to execute them again. Starting from a JDK base (in this case, from JBoss which already contains jboss user), it will download git and maven tools. Next, it will proceed with the cloning of the repository (its branch and URL are configurable, by default they are main and ) and the compilation of sources and their packaging. Then, it will include some properties files (for configuring the KIE Smart Router, logging, and the certificate for TLS communication) and will execute this command to import the certificate into a trust Keystore (as it is a self-signed certificate, created ad-hoc for testing purposes): keytool -importcert -noprompt -trustcacerts -alias toxiproxy-full-ks -file $ROUTER_HOME/kieks.crt -keystore /etc/pki/java/cacerts -storepass changeit An aside about certificates and TLS communication: CERTIFICATE GENERATION In order to generate, in your localhost, a self-signed certificate valid for multiple hostnames with keytool, you must include the DNS (network alias) as Subject Alternative Names (SAN) if you don’t want to get a “no name matching” exception: keytool -genkeypair -alias toxiproxy-full-ks -keyalg RSA -keysize 2048 -validity 365 -keystore serverks.pkcs12 -storetype PKCS12 -dname "cn=Kie Server,o=jbpm,c=ES" -keypass secret -storepass secret -ext san=dns:full-node1,dns:toxiproxy,dns:localhost Secondly, we will export it into a .crt file. For example, naming it as kie.crt: keytool -export -alias toxiproxy-full-ks -file kie.crt -keystore serverks.pkcs12 Enter keystore password: Certificate stored in file &lt;kie.crt&gt; KIE Smart Router image will use this one. In the KIE Server, for enabling secure connections, we must execute this jboss-cli command as part of the initialization:  security enable-ssl-http-server --key-store-path=$JBOSS_HOME/standalone/configuration/serverks.pkcs12 --key-store-password=secret FROM DOCKERFILE TO IMAGE-ON-THE-FLY Finally, the entrypoint of the container will be the standard “java -jar …” command including the $ROUTER_PROPS to enable the file configuration and its watcher. withEnv("ROUTER_PROPS", "-Djava.util.logging.config.file=$ROUTER_HOME/logging.properties -Dorg.kie.server.router.config.watcher.enabled=true -Dorg.kie.server.router.config.file=$ROUTER_HOME/smart_router.properties"); From this Dockerfile, the Testcontainers utility “ImageFromDockerfile" will build the image of the KIE Smart Router containing also the network configuration, the LogConsumer (whose purpose is avoiding sleep calls) and will wait for the expected message to consider the component "up and running": withNetwork(network); withNetworkAliases(SMARTROUTER_ALIAS); withExposedPorts(SMARTROUTER_PORT); withLogConsumer(new Slf4jLogConsumer(logger).withPrefix("SMART-ROUTER")); waitingFor(Wait.forLogMessage(".*KieServerRouter started on.*", 1).withStartupTimeout(Duration.ofMinutes(2L))); NETWORK ISSUES TEST INSIGHT                                            You can find the code and configuration for this example . Let’s give some hints on how to parameterize and structure tests for easy scale. Test cases are aimed to validate whether the component fulfills the circuit breaker pattern, making it stable and usable during hard network conditions. The routing table (kie-server-router.json file) has to be consistently updated to open and close the circuit, and a polling mechanism is launched to check when the connections are recovered. COMPLEX AS SYSTEM TESTS, STRAIGHTFORWARD AS UNIT TESTS with @MethodSource will allow us to define the different toxics to apply in each proxy for exercising the same tests in different contexts. This static method “provideToxics” returns a Stream of Arguments that will be passed to each test. We can combine the toxics as we want in our testing matrix without interfering with the implementation of the tests. Notice that we can even set up the properties of these toxics based on random values between a range (as the waiting time before a timeout): ToxicSupplier&lt;Toxic, IOException&gt; timeout3 = () -&gt; proxy3.toxics().timeout("timeout", DOWNSTREAM, getRandomTimeout(2000,5000)); When a toxic is applied (ToxicSupplier is a functional interface that defines a get method like Suppliers) for a proxy, the abnormal behavior of the network begins over that path. On the other hand, when invoking removeAllToxics method, toxics are completely wiped out. As a result, the network comes back to a healthy condition. This control flow of the impediments on the arrange-act-assert steps leverages the power of the tests. The test suite is completely self-contained, managing the resources easily, in a predictable way, like in a unit test. Here, the unit is our SUT comprising several components and connections. Finally, tests don’t rely on sleep functions to wait for the expected behavior of the SUT but actively poll over the routing table or the logs to check if the desired state is already reached before a timeout. This approach is not only faster, but furthermore, it’s also less error-prone in CI environments.  CONCLUSION: AUTOMATE NETWORK ISSUES TESTING , followed by Googlers and other major players in the industry, states that “if you liked it, then you shoulda put a test on it”. A test here means an automated test. For some critical aspects, like how the system handles network failures, these tests may have some complexity, but with new containerized tools (like Testcontainers and Toxiproxy) the effort is really worth it. Network issues won’t be completely prevented ever and modern architectures (KIE Smart Router is a good example) follow resilience and stability patterns to minimize their effects. But you will only be confident that the system exhibits the desired behavior when you write an automated test for it and this one becomes part of the CI to execute regressions.  Investing in automated testing for a great variety of network issues is, without a shadow of a doubt, a recipe for success. The post appeared first on .</content><dc:creator>Gonzalo Muñoz Fernández</dc:creator></entry><entry><title type="html">Using JavaScript and Power Fx with DMN</title><link rel="alternate" href="https://blog.kie.org/2022/03/using-javascript-and-power-fx-with-dmn.html" /><author><name>Matteo Mortari</name></author><id>https://blog.kie.org/2022/03/using-javascript-and-power-fx-with-dmn.html</id><updated>2022-03-25T08:52:01Z</updated><content type="html">In this short update, I want to share with you about an experimental feature to leverage the extensibility of the DMN specification to evaluate expressions using a plurality of expression languages, such as JavaScript, , and potentially many more! For the running example in this post, let’s use the Body Mass Index (BMI) calculation described in the : We can classify the result of the calculation, based on a standard Decision Table: The decision table has been simplified if compared to the original article from Wikipedia, but that’s irrelevant for the scope of this example. The overall DRG of the DMN model looks like this: As we expect, "Mass" and "Height" are the InputDatas of the model; then we calculate the BMI with a first Decision node. Finally, we classify the calculated BMI value, accordingly to the Decision Table above. The last step is to provide the expression for the "Calculate BMI" decision node. For example, using Power Fx idioms: It would result in this final expression for the "Calculate BMI" decision node: In this case, the resulting DMN model evaluates using two expression languages: Power Fx for the first Decision, and the default (FEEL) for the Decision Table. For another example, we could use idiomatic JavaScript: In this second case, the resulting DMN model evaluates using two expression languages: JavaScript for the first Decision, and again FEEL for the Decision Table. RUNNING THE DEMO We can now run the Kogito application. To demonstrate the BMI calculation, we naturally keep using the Swagger GUI: If you are already accustomed in using DMN models with Kogito, you will have noticed there is basically no different in the way this system behaves from an external point of view. This is what we expect! We have now defined two DMN models, using a plurality of expression languages. However, our goal is to model our decision services in the most convenient and effective way possible. In this case, for example, we have used Power Fx, or JavaScript for some calculations. The code of this demo for the curious, is available . CONCLUSIONS Don’t forget to check out the video linked above, for a live demonstration of this experimental capability! In this post, we have leveraged the extensibility of the DMN specification, in order to evaluate expressions using a plurality of expression languages. We have just used JavaScript and Power Fx with DMN! Questions? Feedback? Don’t hesitate to let us know! The post appeared first on .</content><dc:creator>Matteo Mortari</dc:creator></entry><entry><title type="html">This Week in JBoss - 25 March 2022</title><link rel="alternate" href="https://www.jboss.org/posts/weekly-2022-03-25.html" /><category term="quarkus" /><category term="kubernetes" /><category term="java" /><category term="infinispan" /><category term="jakarta ee" /><category term="wildfly" /><category term="ansible" /><category term="azure app service" /><author><name>Francesco Marchioni</name><uri>https://www.jboss.org/people/francesco-marchioni</uri><email>do-not-reply@jboss.com</email></author><id>https://www.jboss.org/posts/weekly-2022-03-25.html</id><updated>2022-03-25T00:00:00Z</updated><content type="html">&lt;article class="" data-tags="quarkus, kubernetes, java, infinispan, jakarta ee, wildfly, ansible, azure app service"&gt; &lt;h1&gt;This Week in JBoss - 25 March 2022&lt;/h1&gt; &lt;p class="preamble"&gt;&lt;/p&gt;&lt;p&gt;Happy Friday, everyone!&lt;/p&gt; &lt;p&gt;Here is another edition of the JBoss Editorial with exciting news and updates from your JBoss communities.&lt;/p&gt;&lt;p&gt;&lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="_release_roundup"&gt;Release roundup&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Here are the most recent releases for this edition:&lt;/p&gt; &lt;div class="ulist square"&gt; &lt;ul class="square"&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-2-7-5-final-released/"&gt;Quarkus 2.7.5&lt;/a&gt; - There is a new maintenance release with a new round of bugfixes and documentation improvements. This should be a safe upgrade upgrade for anyone already using 2.7. More details on the &lt;a href="https://github.com/quarkusio/quarkus/wiki/Migration-Guide-2.7"&gt;Migration Guide 2.7&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/kiegroup/kogito-images/releases/tag/1.19.0"&gt;Kogito 1.19.0&lt;/a&gt; - We are glad to announce that the Kogito 1.19.0 release is now available!.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://infinispan.org/download/"&gt;Infinispan 14.0.0.Dev01&lt;/a&gt; - Infinispan 14 GA is almost ready! Expect some cool features such as Redis (RESP) endpoints, new MP Metrics with Micrometer, clustering and endpoint metrics in Prometheus, FIPS compatible Infinispan Installation, Cross-site replication memory and batching improvements and Dynamic Role-Based Access Control&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_write_kubernetes_in_java_with_the_java_operator_sdk_part_2"&gt;Write Kubernetes in Java with the Java Operator SDK (Part 2)&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/22/write-kubernetes-java-java-operator-sdk-part-2"&gt;Write Kubernetes in Java with the Java Operator SDK, Part 2&lt;/a&gt;, by Christophe Laprun&lt;/p&gt; &lt;p&gt;In this post, Christophe teach us how to use the Java Operator SDK and its Quarkus extension to build a sample application as you take a deeper dive into writing Kubernetes Operators in Java.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_deploy_infinispan_automatically_with_ansible"&gt;Deploy Infinispan automatically with Ansible&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/21/deploy-infinispan-automatically-ansible"&gt;Deploy Infinispan automatically with Ansible&lt;/a&gt;, by Romain Pelisse&lt;/p&gt; &lt;p&gt;In this article from Romain, you will learn how to use Ansible to cover all repetitive work to provision Infinispan. It covers everything from downloading software, preparing the environment (user, group, firewall), deploying the binary files and the configuration, setting up the service in systemd, etc. That’s a great way to get started with Infinispan and Ansible.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_clustering_support_for_jboss_eap_on_azure_app_service_tech_preview"&gt;Clustering support for JBoss EAP on Azure App Service (Tech Preview)&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/15/preview-clustering-support-jboss-eap-azure-app-service"&gt;Clustering support for JBoss EAP on Azure App Service (Tech Preview)&lt;/a&gt;, by James Falkner and Jason Freeberg&lt;/p&gt; &lt;p&gt;If you want to try out a preview of JBoss EAP clustering on Azure App Service then this article is for you! The combination of JBoss EAP, a leading Jakarta EE platform, with Microsoft Azure, a leading cloud platform, gives JBoss EAP users a powerful path to the cloud.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_quarkus_newsletter_18_march"&gt;Quarkus Newsletter #18 - March&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-newsletter-18/"&gt;Quarkus March newsletter&lt;/a&gt;, By James Cobb&lt;/p&gt; &lt;p&gt;This newsletter covers what’s new with Java 17 and containers, discusses LogicDrop and Vaadin’s path to using Quarkus, and get a look at Continuous testing with Quarkus.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_quarkus_migration_tips"&gt;Quarkus Migration Tips&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;&lt;a href="http://www.mastertheboss.com/soa-cloud/quarkus/quarkus-migration-tips/"&gt;Quarkus Migration Tips&lt;/a&gt;, by Francesco Marchioni&lt;/p&gt; &lt;p&gt;In this article from mastertheboss.com you will learn which are the available guidelines to migrate Quarkus applications and tools that can help you to simplify your update strategy&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_youtube_video_build_deploy_wildfly_quickstarts_on_openshift"&gt;Youtube video: Build &amp;#38; Deploy WildFly Quickstarts on OpenShift&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Y2En5miRKjY"&gt;Build &amp;#38; Deploy WildFly Quickstarts on OpenShift&lt;/a&gt;, by Jeff Meslin&lt;/p&gt; &lt;p&gt;Finally, from WildFly’s youtube channel check this video by Jeff Meslin to learn how to build and deploy a quickstart for WildFly on OpenShift&lt;/p&gt; &lt;p&gt;Jeff shows how to deploy the microprofile-config quickstart for WildFly on the Developer Sandbox for Red Hat OpenShift. This uses the Helm Chart for WildFly to configuring building and deploying WildFly applications.&lt;/p&gt; &lt;p&gt;&lt;em&gt;That’s all folks! Please join us again in two weeks for another round of our JBoss editorial!&lt;/em&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="author"&gt; &lt;pfe-avatar pfe-shape="circle" pfe-pattern="squares" pfe-src="/img/people/francesco-marchioni.png"&gt;&lt;/pfe-avatar&gt; &lt;span&gt;Francesco Marchioni&lt;/span&gt; &lt;/div&gt;&lt;/article&gt;</content><dc:creator>Francesco Marchioni</dc:creator></entry><entry><title>Red Hat Developer roundup: Best of March 2022</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/03/24/red-hat-developer-roundup-best-march-2022" /><author><name>Red Hat Developer Editorial Team</name></author><id>6a2bad30-cb7f-432d-9c3a-88c8e666c6b7</id><updated>2022-03-24T07:00:00Z</updated><published>2022-03-24T07:00:00Z</published><summary type="html">&lt;p&gt;Welcome to our monthly recap of the articles we published in March 2022! This month, Red Hat Developer readers flocked to articles to help them write code on the platforms they trust. You can learn more about &lt;a href="https://developers.redhat.com/articles/2022/03/10/modular-perl-red-hat-enterprise-linux-8"&gt;modular Perl in Red Hat Enterprise 8&lt;/a&gt;, get into the details of &lt;a href="https://developers.redhat.com/articles/2022/03/02/introduction-nodejs-reference-architecture-part-7-code-coverage"&gt;testing and code coverage in the Node.js reference architecture&lt;/a&gt;, or dive deeper into Quarkus in the &lt;a href="https://developers.redhat.com/articles/2022/03/03/rest-api-error-modeling-quarkus-20"&gt;latest installment of our Quarkus from the ground up series&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;And there's much more as well! Read on for the March highlights.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: See the end of this article for the full lineup published in March 2022.&lt;/p&gt; &lt;h2&gt;Podman and container development&lt;/h2&gt; &lt;p&gt;Are you a &lt;a href="https://developers.redhat.com/topics/dotnet"&gt;.NET&lt;/a&gt; user interested in rolling out &lt;a href="https://developers.redhat.com/topics/containers"&gt;containerized&lt;/a&gt; applications with Podman? Another one of our most popular articles of the month explains how to &lt;a href="https://developers.redhat.com/articles/2022/03/21/hello-podman-using-net"&gt;control Podman from .NET&lt;/a&gt;. .NET users can also get tips on how to &lt;a href="https://developers.redhat.com/articles/2022/02/22/debug-net-applications-running-local-containers-vs-code"&gt;debug .NET applications running in local containers with VS Code&lt;/a&gt;; and if you're working with Red Hat CodeReady Workspaces, you can find out more about &lt;a href="https://developers.redhat.com/articles/2022/02/28/simplify-container-development-red-hat-codeready-workspaces"&gt;simplifying container development with that service&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;OpenShift: What's new and what's fast&lt;/h2&gt; &lt;p&gt;Version 4.10 of the &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; is here, and that's big news for the many developers who are deploying their container-based workloads on that platform. If you need a deep dive into &lt;a href="https://developers.redhat.com/articles/2022/03/22/whats-new-developers-openshift-410-console"&gt;what's for developers in the OpenShift 4.10 console&lt;/a&gt;, Red Hat Developer has you covered.&lt;/p&gt; &lt;p&gt;Want to learn more about how to get started with Red Hat OpenShift quickly? Check out our articles on &lt;a href="https://developers.redhat.com/articles/2022/03/01/package-and-run-your-java-maven-application-openshift-seconds"&gt;packaging and running a Java Maven application on OpenShift in seconds&lt;/a&gt; and &lt;a href="https://developers.redhat.com/articles/2022/03/04/create-azure-red-hat-openshift-cluster-less-5-minutes"&gt;creating an Azure Red Hat OpenShift cluster in less than five minutes&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Do more with Kafka&lt;/h2&gt; &lt;p&gt;Developers love &lt;a href="https://developers.redhat.com/topics/kafka-kubernetes"&gt;Kafka&lt;/a&gt; for its ability to move truly massive amounts of data. Clustering is one of the keys to Kafka's power, but how many Kafka clusters does your infrastructure require? Red Hat Developer's most popular article in March tries to answer the question of whether you need a &lt;a href="https://developers.redhat.com/articles/2022/03/10/which-better-single-kafka-cluster-rule-them-all-or-many"&gt;single Kafka cluster—or many clusters—to rule them all&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Meanwhile, for those interested in &lt;a href="https://developers.redhat.com/topics/event-driven"&gt;event-driven&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless&lt;/a&gt; architectures, we've offered a guide to &lt;a href="https://developers.redhat.com/articles/2022/03/14/process-apache-kafka-records-knatives-serverless-architecture"&gt;processing Apache Kafka records with Knative's serverless architecture&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Understand Java's nitty-gritty details&lt;/h2&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; developers looking to learn more about how their code works under the hood got some treats this month. We did a deep dive into &lt;a href="https://developers.redhat.com/articles/2022/03/16/range-check-elimination-loops-openjdks-hotspot-jvm"&gt;range checks&lt;/a&gt;, a technique the HotSpot JVM uses to improve performance. For those looking to use Cryostat to instrument and monitor their own code, we offered advice on &lt;a href="https://developers.redhat.com/articles/2022/03/08/inject-custom-jdk-flight-recorder-events-containerized-applications"&gt;injecting custom JDK Flight Recorder events in containerized applications&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Choose the best Camel for your integration ride&lt;/h2&gt; &lt;p&gt;Apache Camel is the most popular open source integration framework today, and has evolved to support new environments such as containers on Kubernetes while continuously improving the developer experience. Want to find out more about all the ways you can use Camel and why each came into being? Read the &lt;a href="https://developers.redhat.com/articles/2022/03/14/choose-best-camel-your-integration-ride-part-1"&gt;first&lt;/a&gt;, &lt;a href="https://developers.redhat.com/articles/2022/03/15/choose-best-camel-your-integration-ride-part-2"&gt;second&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/articles/2022/03/16/choose-best-camel-your-integration-ride-part-3"&gt;third&lt;/a&gt; parts of our series on the topic.&lt;/p&gt; &lt;h2&gt;March 2022 on Red Hat Developer&lt;/h2&gt; &lt;p&gt;Here's the full lineup of articles published on Red Hat Developer so far this month:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/10/which-better-single-kafka-cluster-rule-them-all-or-many"&gt;Which is better: A single Kafka cluster to rule them all, or many?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/10/modular-perl-red-hat-enterprise-linux-8"&gt;Modular Perl in Red Hat Enterprise Linux 8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/02/introduction-nodejs-reference-architecture-part-7-code-coverage"&gt;Introduction to the Node.js reference architecture, Part 7: Code coverage&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/01/package-and-run-your-java-maven-application-openshift-seconds"&gt;Package and run your Java Maven application on OpenShift in seconds&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/03/rest-api-error-modeling-quarkus-20"&gt;REST API error modeling with Quarkus 2.0&lt;/a&gt;&lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/23/quarkus-superheroes-managed-services-save-day"&gt;Quarkus Superheroes: Managed services save the day&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/23/use-valgrind-memcheck-custom-memory-manager"&gt;Use Valgrind Memcheck with a custom memory manager&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/23/learn-how-build-train-and-run-pytorch-model"&gt;Learn how to build, train, and run a PyTorch model&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/22/whats-new-developers-openshift-410-console"&gt;What’s new for developers in the OpenShift 4.10 console&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/22/write-kubernetes-java-java-operator-sdk-part-2"&gt;Write Kubernetes in Java with the Java Operator SDK, Part 2&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/21/deploy-infinispan-automatically-ansible"&gt;Deploy Infinispan automatically with Ansible&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/11/easier-way-generate-pdfs-html-templates"&gt;An easier way to generate PDFs from HTML templates&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/04/create-azure-red-hat-openshift-cluster-less-5-minutes"&gt;Create an Azure Red Hat OpenShift cluster in less than 5 minutes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/21/hello-podman-using-net"&gt;Hello Podman using .NET&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/14/choose-best-camel-your-integration-ride-part-1"&gt;Choose the best Camel for your integration ride, Part 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/14/process-apache-kafka-records-knatives-serverless-architecture"&gt;Process Apache Kafka records with Knative's serverless architecture&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/10/kafka-monthly-digest-february-2022"&gt;Kafka Monthly Digest: February 2022&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/07/manage-python-security-thoths-cloud-based-dependency-resolver"&gt;Manage Python security with Thoth's cloud-based dependency resolver&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/15/choose-best-camel-your-integration-ride-part-2"&gt;Choose the best camel for your integration ride, Part 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/16/range-check-elimination-loops-openjdks-hotspot-jvm"&gt;Range check elimination in loops in OpenJDK's HotSpot JVM&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/09/test-github-projects-github-actions-and-testing-farm"&gt;Test GitHub projects with GitHub Actions and Testing Farm&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/18/nodejs-community-update"&gt;Node.js community update&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/16/choose-best-camel-your-integration-ride-part-3"&gt;Choose the best camel for your integration ride, Part 3&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/15/preview-clustering-support-jboss-eap-azure-app-service"&gt;Preview: Clustering support for JBoss EAP on Azure App Service&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/08/inject-custom-jdk-flight-recorder-events-containerized-applications"&gt;Inject custom JDK Flight Recorder events in containerized applications&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/03/04/data-conversion-pandas-dataframes-3-approaches-try"&gt;Data conversion in Pandas dataframes: 3 approaches to try&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/02/22/debug-net-applications-running-local-containers-vs-code"&gt;Debug .NET applications running in local containers with VS Code&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/02/28/simplify-container-development-red-hat-codeready-workspaces"&gt;Simplify container development with Red Hat CodeReady Workspaces&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/02/24/inspecting-containerized-python-applications-cluster"&gt;Inspecting containerized Python applications in a cluster&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/02/25/enforce-code-consistency-clang-format"&gt;Enforce code consistency with clang-format&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/02/24/sql-cache-stores-and-more-data-grid-83"&gt;SQL cache stores and more in Data Grid 8.3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/03/24/red-hat-developer-roundup-best-march-2022" title="Red Hat Developer roundup: Best of March 2022"&gt;Red Hat Developer roundup: Best of March 2022&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Red Hat Developer Editorial Team</dc:creator><dc:date>2022-03-24T07:00:00Z</dc:date></entry><entry><title type="html">Portfolio Architecture Examples - Healthcare Collection</title><link rel="alternate" href="http://www.schabell.org/2022/03/portfolio-architecture-examples-telco-collection.html" /><author><name>Eric D. Schabell</name></author><id>http://www.schabell.org/2022/03/portfolio-architecture-examples-telco-collection.html</id><updated>2022-03-24T06:00:00Z</updated><content type="html">Figure 1: The portfolio architecture process For a few years now we've been working on a project we have named . These are based on selecting a specific use case we are seeing used in the real world by customers and then finding implementations of that case using three or more products from the Red Hat portfolio. This basic premise is used as the foundation, but many aspects of open source are included in both the process and the final product we have defined. There is a community, where we share the initial project kickoff with a group of architects and use their initial feedback from the start. We also present the architecture product we've created right at the end before we publish to ensure usability by architects in the field. The final publish product includes some internal only content around the customer projects researched, but most of the content is through various open source channels.  This article is sharing an overview of the product we've developed, what's available to you , and concludes by sharing a collection of architectures we've published. INTRODUCTION The basic premise of a portfolio architecture is that it's a use case with two to three actual implementations that can be researched and includes the use of a minimum of three products. This is the ideal foundation for a project to start, but we encountered a problem with use cases containing emerging technologies or emerging domains in the market. To account for these we've chosen to note the fact that these are opinionated architectures based on internal reference architectures.  The product has been defined as complete for publishing when it contains the following content: * Short use case definition * Diagrams - logical, schematic (physical), and detail diagrams * Public slide deck containing the use case story and architecture diagrams * Internal slide deck containing both the pubic deck content and the confidential customer research * Video (short) explanation of the architecture * Either a technical brief document or one or more articles covering the solution architecture Note that the above items noted in italics are all freely available to you online in the Red Hat Portfolio Architecture Center or in the Portfolio Architecture Examples repository. FIGURE 2: LOGICAL DIAGRAM DESIGN TEMPLATE TOOLING AND WORKSHOPS The progress towards our products required a good idea of how we wanted to diagram our architectures. We chose to keep them very generic and simple in style to facilitate all levels of conversation around a particular use case without getting bogged down in notational discussions.  A simple three level design for our architectures was captured by using logical, schematic, and detail diagrams. All of these have been integrated in with pre-defined templates and icons for easily getting started. Furthermore, we've developed a tooling workshop to quickly ramp up on the design methods and tooling we've made available. It's called , has been featured in several. HEALTHCARE COLLECTION The collection featured today is centred around architectures in the healthcare domain. There are two architectures in this collection and we'll provide a short overview of each, leaving the in depth exploration as an exercise for the reader. Figure 3: Healthcare architecture collection In each of these architecture overviews you'll find a table of contents outlining the technologies used, several example schematic diagrams with descriptions, and a link in the last section to open the diagrams directly into the online tooling in your browser. Intelligent DaaS (Data as a Service) is about building and delivery of systems and platforms in a secure and scalable manner while driving data needs for moving towards consumerisation in healthcare. Feel free to explore this portfolio architecture by clicking on the diagram below. Edge Medical Diagnosis is accelerating medical diagnosis using condition detection in medical imagery with AI/ML at medical facilities. Feel free to explore this portfolio architecture by clicking on the diagram below. If you are interested in more architecture solutions like these, feel free to export the and stay tuned for more collection overviews.</content><dc:creator>Eric D. Schabell</dc:creator></entry><entry><title>JBoss Tools and Red Hat CodeReady Studio for Eclipse 2022-03RC1</title><link rel="alternate" type="text/html" href="https://tools.jboss.org/blog/4.23.0.am1.html" /><category term="release" /><category term="jbosstools" /><category term="devstudio" /><category term="jbosscentral" /><category term="codereadystudio" /><author><name>jeffmaury</name></author><id>https://tools.jboss.org/blog/4.23.0.am1.html</id><updated>2022-03-25T16:28:11Z</updated><published>2022-03-24T00:00:00Z</published><content type="html">&lt;div&gt;&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Happy to announce 4.23.0.AM1 (Developer Milestone 1) build for Eclipse 2022-03RC1.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Downloads available at &lt;a href="https://tools.jboss.org/downloads/jbosstools/2022-03/4.23.0.AM1.html"&gt;JBoss Tools 4.23.0 AM1&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-new"&gt;&lt;a class="anchor" href="#what-is-new"&gt;&lt;/a&gt;What is New?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Full info is at &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.23.0.AM1.html"&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="hibernate-tools"&gt;&lt;a class="anchor" href="#hibernate-tools"&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="hibernate-runtime-provider-updates"&gt;&lt;a class="anchor" href="#hibernate-runtime-provider-updates"&gt;&lt;/a&gt;Hibernate Runtime Provider Updates&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A number of additions and updates have been performed on the available Hibernate runtime providers.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="runtime-provider-updates"&gt;&lt;a class="anchor" href="#runtime-provider-updates"&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h5&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 6.0 runtime provider (Preview) now incorporates Hibernate Core version 6.0.0.CR1 and Hibernate Tools version 6.0.0.CR1.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Hibernate 5.6 runtime provider now incorporates Hibernate Core version 5.6.5.Final and Hibernate Tools version 5.6.5.Final.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="and-more"&gt;&lt;a class="anchor" href="#and-more"&gt;&lt;/a&gt;And more…​&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can find more noteworthy updates in on &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.23.0.AM1.html"&gt;this page&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Jeff Maury&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;</content><summary>Happy to announce 4.23.0.AM1 (Developer Milestone 1) build for Eclipse 2022-03RC1. Downloads available at JBoss Tools 4.23.0 AM1. What is New? Full info is at this page. Some highlights are below. Hibernate Tools Hibernate Runtime Provider Updates A number of additions and updates have been performed on the available Hibernate runtime providers. Runtime Provider Updates The Hibernate 6.0 runtime provider (Preview) now incorporates Hibernate Core version 6.0.0.CR1 and Hibernate Tools version 6.0.0.CR1. The Hibernate 5.6 runtime provider now incorporates Hibernate Core version 5.6.5.Final and Hibernate Tools version 5.6.5.Final. And more…​ You can find more noteworthy updates in on this page. Enjoy! Jeff Maury ...</summary><dc:creator>jeffmaury</dc:creator><dc:date>2022-03-24T00:00:00Z</dc:date></entry><entry><title type="html">Quarkus migration tips (2022)</title><link rel="alternate" href="http://www.mastertheboss.com/soa-cloud/quarkus/quarkus-migration-tips/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/soa-cloud/quarkus/quarkus-migration-tips/</id><updated>2022-03-23T15:33:00Z</updated><content type="html">Quarkus is one of the most innovative Java projects, therefore it’s not a surprise there are frequent updates to it. In this article we will have a look at the available guidelines to migrate Quarkus applications and tools that can help you to simplify your update strategy. Migration Overview When planning a migration of a ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title>Quarkus Superheroes: Managed services save the day</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/03/23/quarkus-superheroes-managed-services-save-day" /><author><name>Eric Deandrea</name></author><id>fc4ac9e3-f97b-4a22-b32d-bb1728224dcc</id><updated>2022-03-23T07:00:00Z</updated><published>2022-03-23T07:00:00Z</published><summary type="html">&lt;p&gt;Are you a developer building &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt;? Do you struggle with developing and testing individual microservices that are part of a more extensive system? Would you rather focus on your applications and let something else manage the services they require?&lt;/p&gt; &lt;p&gt;This article introduces the &lt;a href="https://quarkus.io/blog/quarkus-superheroes-to-the-rescue"&gt;Quarkus Superheroes sample application&lt;/a&gt;, shows how to deploy it to the free &lt;a href="https://developers.redhat.com/developer-sandbox"&gt;Developer Sandbox for Red Hat OpenShift&lt;/a&gt;, and then illustrates how &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; developers can modify the application to replace the backing services with fully managed services provided by &lt;a href="https://cloud.redhat.com/products/application-services"&gt;Red Hat OpenShift Application Services&lt;/a&gt;. The article might seem long, but running the steps should take only 15 to 20 minutes. There are many screenshots to help guide you on your way.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;Here's what you will need if you want to follow along with the steps in this article:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;A Red Hat account, which you need in order to create the managed &lt;a href="https://console.redhat.com/application-services/overview"&gt;Application Services&lt;/a&gt; on the &lt;a href="https://console.redhat.com"&gt;Red Hat Hybrid Cloud Console&lt;/a&gt; and access the &lt;a href="https://developers.redhat.com/developer-sandbox"&gt;Developer Sandbox for Red Hat OpenShift&lt;/a&gt;. No credit card is required.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;oc&lt;/code&gt; &lt;a href="https://docs.openshift.com/container-platform/4.9/cli_reference/openshift_cli/getting-started-cli.html"&gt;Red Hat OpenShift command-line interface (CLI)&lt;/a&gt;, or &lt;a href="https://kubernetes.io/docs/tasks/tools/#kubectl"&gt;kubectl&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;A &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; development environment. This article uses the &lt;a href="https://developers.redhat.com/articles/2021/12/14/explore-java-17-language-features-quarkus"&gt;Java 17&lt;/a&gt; version of the application, but any of the other three versions (natively-compiled Java 11, JVM Java 11, or natively-compiled Java 17) would work just the same.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Quarkus Superheroes sample application&lt;/h2&gt; &lt;p&gt;&lt;a href="products/quarkus/overview"&gt;Quarkus&lt;/a&gt; has excellent &lt;a href="https://quarkus.io/guides"&gt;documentation&lt;/a&gt; and &lt;a href="https://github.com/quarkusio/quarkus-quickstarts"&gt;quickstarts&lt;/a&gt; to help you become familiar with various features in the Quarkus ecosystem. However, what was missing before was a fully implemented sample set of real-world applications that use these features, patterns, and best practices while also reflecting the problems Quarkus is trying to solve.&lt;/p&gt; &lt;p&gt;Released in February 2022, the &lt;a href="https://quarkus.io/blog/quarkus-superheroes-to-the-rescue"&gt;Quarkus Superheroes application&lt;/a&gt; consists of several microservices co-existing to form a more extensive system. Some microservices communicate synchronously via REST. Others are event-driven, producing and consuming events to and from &lt;a href="https://kafka.apache.org"&gt;Apache Kafka&lt;/a&gt;. Some microservices are &lt;a href="https://www.reactivemanifesto.org"&gt;reactive&lt;/a&gt;, while others are traditional.&lt;/p&gt; &lt;p&gt;Figure 1 shows the overall architecture of the application.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/arch_2.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/arch_2.png?itok=jMAit2Kb" width="1440" height="1561" alt="The architecture of Quarkus Superheroes consists of elements of the game, plus services for a UI and statistics." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 1: Overall architecture of the Quarkus Superheroes.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Detailed information about the application and its architecture can be found on the &lt;a href="https://quarkus.io/blog/quarkus-superheroes-to-the-rescue"&gt;quarkus.io blog&lt;/a&gt;. One of the &lt;a href="https://quarkus.io/blog/quarkus-superheroes-to-the-rescue/#requirements"&gt;main requirements&lt;/a&gt; when building the application was that it should be simple to deploy on &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;. Let's test that theory.&lt;/p&gt; &lt;h2&gt;Deploy the application on the Developer Sandbox for Red Hat OpenShift&lt;/h2&gt; &lt;p&gt;The &lt;a href="https://developers.redhat.com/developer-sandbox"&gt;Developer Sandbox for Red Hat OpenShift&lt;/a&gt; provides you with a private &lt;a href="products/openshift"&gt;Red Hat OpenShift&lt;/a&gt; environment, free for use for 30 days, in a shared, multi-tenant OpenShift cluster that is preconfigured with a set of developer tools. Your private OpenShift environment includes two projects (namespaces) and a resource quota of 7GB RAM and 15GB storage. Your application's development and stage phases can be emulated using the two namespaces. All user &lt;code&gt;Pod&lt;/code&gt;s are automatically deleted 12 hours after being created.&lt;/p&gt; &lt;h3&gt;Log into the Developer Sandbox&lt;/h3&gt; &lt;p&gt;You can spin up and access your Developer Sandbox with your Red Hat account. &lt;a href="https://redhat-scholars.github.io/managed-kafka-service-registry-workshop/managed-kafka-service-registry-workshop/main/03-quarkus-app-with-kafka-service-registry.html#devsandboxaccess"&gt;Follow these instructions&lt;/a&gt; to log into your Developer Sandbox account. Don't worry if you don't yet have a Red Hat account. The instructions will guide you through how to create and verify one.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: You need to follow only the six steps in the &lt;strong&gt;Get access to the Developer Sandbox&lt;/strong&gt; section of the instructions.&lt;/p&gt; &lt;p&gt;You can move to the next section once you are in the Developer Perspective of your sandbox.&lt;/p&gt; &lt;h3&gt;Connect your local machine to the Developer Sandbox&lt;/h3&gt; &lt;p&gt;Now you need to connect your local machine to your sandbox. Follow &lt;a href="https://developers.redhat.com/blog/2021/04/21/access-your-developer-sandbox-for-red-hat-openshift-from-the-command-line"&gt;these instructions&lt;/a&gt; to download the &lt;a href="https://docs.openshift.com/container-platform/4.9/cli_reference/openshift_cli/getting-started-cli.html"&gt;OpenShift CLI&lt;/a&gt; (if you don't already have it) and run &lt;code&gt;oc login&lt;/code&gt; with the token from your sandbox. Once done, your terminal should be set in the &lt;code&gt;&lt;your-username&gt;-dev&lt;/code&gt; project.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note: &lt;/strong&gt;If you already have a Developer Sandbox account and have existing workloads in your project, you might need to delete those before deploying the Quarkus Superheroes application. The Developer Sandbox limits the resources each user can deploy at a single time.&lt;/p&gt; &lt;h3&gt;Deploy Quarkus Superheroes&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;&lt;a href="https://github.com/quarkusio/quarkus-super-heroes/tree/main/deploy/k8s"&gt;deploy/k8s&lt;/a&gt;&lt;/code&gt; directory in the &lt;a href="https://github.com/quarkusio/quarkus-super-heroes"&gt;root of the repository&lt;/a&gt; contains Kubernetes descriptors for each of the four versions of the application: JVM 11, JVM 17, natively compiled with Java 11, and natively compiled with Java 17.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Quarkus Superheroes repository contains Kubernetes descriptors for various flavors of Kubernetes: &lt;a href="https://www.openshift.com"&gt;OpenShift&lt;/a&gt;, &lt;a href="https://quarkus.io/guides/deploying-to-kubernetes#deploying-to-minikube"&gt;minikube&lt;/a&gt;, &lt;a href="https://knative.dev"&gt;Knative&lt;/a&gt;, and "vanilla" &lt;a href="https://www.kubernetes.io"&gt;Kubernetes&lt;/a&gt;. The only real difference between the minikube and Kubernetes descriptors is that all the application &lt;code&gt;Service&lt;/code&gt;s in the minikube descriptors use &lt;code&gt;type: NodePort&lt;/code&gt;. A list of all the applications can be obtained simply by running &lt;code&gt;minikube service list&lt;/code&gt;. The Knative descriptors use &lt;a href="https://knative.dev/docs/serving"&gt;Knative Serving&lt;/a&gt; for each of the applications.&lt;/p&gt; &lt;p&gt;If you'd like, you can run &lt;code&gt;git clone&lt;/code&gt; to download the code from the &lt;a href="https://github.com/quarkusio/quarkus-super-heroes"&gt;Quarkus Superheroes GitHub repository&lt;/a&gt;. However, cloning isn't necessary because you can apply Kubernetes resources directly from remote locations.&lt;/p&gt; &lt;p&gt;Follow the following steps in your terminal to deploy the Java 17 version of the &lt;a href="https://quay.io/quarkus-super-heroes"&gt;application container images&lt;/a&gt;. Wait for each step to complete before proceeding with the next:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Deploy the application by executing: &lt;pre&gt; &lt;code class="language-bash"&gt;$ oc apply -f https://raw.githubusercontent.com/quarkusio/quarkus-super-heroes/main/deploy/k8s/java17-openshift.yml&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Deploy the &lt;a href="https://prometheus.io"&gt;Prometheus&lt;/a&gt; monitoring service by executing: &lt;pre&gt; &lt;code class="language-bash"&gt;$ oc apply -f https://raw.githubusercontent.com/quarkusio/quarkus-super-heroes/main/deploy/k8s/prometheus-openshift.yml&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt;&lt;p&gt;That's it—deploying the Superheroes is super simple! Once everything is deployed, your browser should look something like Figure 2.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/deployed.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/deployed.png?itok=24ZA2TGj" width="836" height="1160" alt="The topology for Quarkus Superheroes shows the relationships among the services." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 2: Topology view for Quarkus Superheroes showing relationships among the services.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The application as deployed is &lt;em&gt;not&lt;/em&gt; considered production-ready. The databases, Prometheus instance, Kafka broker, and schema registry deployed are not highly available and do not use any Kubernetes operators for management or monitoring. They also use ephemeral storage.&lt;/p&gt; &lt;p&gt;Later in this article, we'll substitute a fully hosted and managed &lt;a href="https://developers.redhat.com/products/red-hat-openshift-streams-for-apache-kafka/getting-started"&gt;Kafka service&lt;/a&gt; and &lt;a href="https://console.redhat.com/application-services/service-registry"&gt;schema registry service&lt;/a&gt; into the mix.&lt;/p&gt; &lt;h2&gt;Interacting with the application&lt;/h2&gt; &lt;p&gt;Open the event statistics user interface (UI) by clicking the icon in the upper right corner of the &lt;code&gt;event-statistics&lt;/code&gt; application, shown in Figure 3.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/opene.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/opene.png?itok=EZZUt00h" width="345" height="304" alt="The topology for the event statistics UI provides a button to open it." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 3: Button for opening the event-statistics UI.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Once open, you should see the event-statistics UI shown in Figure 4.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/figure-4.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/figure-4.png?itok=pPbIbTuU" width="913" height="246" alt="The event-statistics UI showing battle statistics" loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 4: The event-statistics UI showing battle statistics.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;There isn't anything here yet, but once we interact with the main application UI, there will be.&lt;/p&gt; &lt;p&gt;Similarly, open the Superheroes UI by clicking the icon in the upper right corner of the &lt;code&gt;ui-super-heroes&lt;/code&gt; application, shown in Figure 5.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/opens.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/opens.png?itok=gWclPICD" width="194" height="212" alt="The topology for the superheroes UI provides a button to open it." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 5: Button for opening the Superheroes UI.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Once open, you should see the Superheroes UI, shown in Figure 6. Highlighted in green in Figure 6 are clickable areas such as:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Expand/collapse the list of powers a hero or villain has&lt;/li&gt; &lt;li&gt;Randomly select a new hero and villain&lt;/li&gt; &lt;li&gt;Perform a battle&lt;/li&gt; &lt;/ul&gt;&lt;p class="Indent1"&gt;&lt;strong&gt;Note:&lt;/strong&gt; You will most likely see different fighters than in the screenshot. They are randomly chosen.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/super.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/super.png?itok=-waXJzpI" width="600" height="490" alt="The Superheroes UI shows a villain and hero, randomly chosen." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 6: The Superheroes UI shows a villain and hero, randomly chosen.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Go ahead and perform a few battles, both with the same fighters and with new fighters. Once you've completed a few battles, note that a chronological list of battles is now displayed in the table on the screen.&lt;/p&gt; &lt;p&gt;You can also switch your browser tab back over to the event statistics UI. The slider in the event statistics UI should have moved one way or another or stayed in the middle if there were equal wins. There should also be a list of the top ten winners and the number of wins for each. Figure 7 shows an example.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/event-statistics-ui.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/event-statistics-ui.png?itok=FgsRS-EX" width="908" height="293" alt="event-statistics UI after a few battles." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 7: event-statistics UI after a few battles.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Messages in &lt;a href="https://quarkus.io/guides/kafka-schema-registry-avro"&gt;Apache Avro&lt;/a&gt; format arrive from &lt;a href="https://kafka.apache.org"&gt;Apache Kafka&lt;/a&gt; from the &lt;code&gt;rest-fights&lt;/code&gt; service to the &lt;code&gt;event-statistics&lt;/code&gt; service. The schema for these messages is registered in an &lt;a href="https://www.apicur.io/registry"&gt;Apicurio Schema Registry&lt;/a&gt;. You can open the Apicurio Schema Registry by clicking the icon in the upper right corner of the &lt;code&gt;apicurio&lt;/code&gt; application, shown in Figure 8.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/opena.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/opena.png?itok=2HgygL5z" width="182" height="167" alt="The topology for the Apicurio UI provides a button to open it." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 8: Button for opening the Apicurio UI.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Once open, you should see the Apicurio UI, shown in Figure 9.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/apicurio.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/apicurio.png?itok=oqVaIUE-" width="581" height="347" alt="The Apicurio service registry instance contains a Fight instance." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 9: The Apicurio Service Registry instance containing a Fight schema.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Click the &lt;code&gt;Fight (fights-value)&lt;/code&gt; link to see all the details of the schema, including the Avro source of the schema itself.&lt;/p&gt; &lt;h2&gt;Creating managed services&lt;/h2&gt; &lt;p&gt;We already mentioned that the current setup is not production-ready. Furthermore, if the Kafka or Schema Registry &lt;code&gt;Pod&lt;/code&gt;s restart, all the data is lost. One way to fix this is to use fully hosted and managed Kafka and Schema Registry services.&lt;/p&gt; &lt;p&gt;Red Hat provides managed cloud services, known as the &lt;a href="https://console.redhat.com/application-services/overview"&gt;Red Hat OpenShift Application Services&lt;/a&gt;. We will use a free trial for two of these services, &lt;a href="https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-streams-for-apache-kafka"&gt;Red Hat OpenShift Streams for Apache Kafka&lt;/a&gt; and &lt;a href="https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-service-registry"&gt;Red Hat OpenShift Service Registry&lt;/a&gt;, to provide a set of production-ready services for our application.&lt;/p&gt; &lt;h3&gt;&lt;a id="CreateServiceAccounts" name="CreateServiceAccounts"&gt;&lt;/a&gt;Creating service accounts&lt;/h3&gt; &lt;p&gt;The first thing you need to do is create a few service accounts to be used by your applications. Two applications communicate with Kafka in this architecture: The &lt;code&gt;event-statistics&lt;/code&gt; and &lt;code&gt;rest-fights&lt;/code&gt; services. Each service needs an individual service account for communicating with the managed services.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note:&lt;/strong&gt; In some instances, it might make sense for each service to have an individual service account for each managed service. In this article, we decided to keep things simple, so each service has a single service account for both managed services.&lt;/p&gt; &lt;p&gt;Follow these steps to create the two service accounts:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Open a new browser tab to the &lt;a href="https://console.redhat.com/application-services"&gt;Red Hat OpenShift Application Services dashboard&lt;/a&gt;. The dashboard uses the Red Hat account with which you logged into the sandbox. You might need to accept some additional terms and conditions if this is the first time you've visited the dashboard.&lt;/li&gt; &lt;li&gt;On the left-hand navigation, select &lt;strong&gt;Service Accounts&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;In the middle of the screen, click &lt;strong&gt;Create service account&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;In the &lt;strong&gt;Short description&lt;/strong&gt; field, enter &lt;code&gt;event-statistics&lt;/code&gt; and click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;The &lt;strong&gt;Credentials successfully generated&lt;/strong&gt; screen is now shown. Save the &lt;strong&gt;Client ID&lt;/strong&gt; and &lt;strong&gt;Client secret&lt;/strong&gt; somewhere in a safe place. You will need them later, and they cannot be viewed again. These are the ID and secret for the &lt;code&gt;event-statistics&lt;/code&gt; service.&lt;/li&gt; &lt;li&gt;Once copied, check the &lt;strong&gt;I have copied the client ID and secret box&lt;/strong&gt; and click &lt;strong&gt;Close&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;The &lt;strong&gt;Service Accounts&lt;/strong&gt; screen will be shown. Click &lt;strong&gt;Create service account&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Repeat steps 4-6, but use &lt;code&gt;rest-fights&lt;/code&gt; as the &lt;strong&gt;Short Description&lt;/strong&gt; and copy the generated ID and secret for the &lt;code&gt;rest-fights&lt;/code&gt; service somewhere safe.&lt;/li&gt; &lt;/ol&gt;&lt;h3&gt;Create the Service Registry service&lt;/h3&gt; &lt;p&gt;&lt;a href="https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-service-registry"&gt;Red Hat OpenShift Service Registry&lt;/a&gt; is based on the open-source &lt;a href="https://www.apicur.io/registry/"&gt;Apicurio Registry project&lt;/a&gt;. The service provides a highly available service registry instance that is secure and compatible with the &lt;a href="https://docs.confluent.io/platform/current/schema-registry/develop/api.html"&gt;Confluent Schema Registry API&lt;/a&gt; and &lt;a href="https://github.com/cloudevents/spec/blob/main/schemaregistry/spec.md"&gt;CNCF Schema Registry API&lt;/a&gt;. OpenShift Service Registry is also a perfect companion service for applications that use &lt;a href="https://developers.redhat.com/products/red-hat-openshift-streams-for-apache-kafka/overview"&gt;Red Hat OpenShift Streams for Apache Kafka&lt;/a&gt; and &lt;a href="https://developers.redhat.com/products/red-hat-openshift-api-management/overview"&gt;Red Hat OpenShift API Management&lt;/a&gt;.&lt;/p&gt; &lt;h4&gt;Create the Service Registry instance&lt;/h4&gt; &lt;p&gt;Follow these steps to create a Service Registry instance and give the service accounts the proper access:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;From the &lt;a href="https://console.redhat.com/application-services"&gt;Red Hat OpenShift Application Services dashboard&lt;/a&gt;, expand the &lt;strong&gt;Service Registry&lt;/strong&gt; entry on the left-side menu and click the &lt;strong&gt;Service Registry Instances&lt;/strong&gt; link.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Create Service Registry Instance&lt;/strong&gt; button in the middle of the screen.&lt;/li&gt; &lt;li&gt;In the &lt;strong&gt;Name&lt;/strong&gt; field, enter &lt;code&gt;quarkus-superheroes&lt;/code&gt; and click &lt;strong&gt;Create&lt;/strong&gt;. &lt;ul&gt;&lt;li&gt;It might take a minute or so for the instance to create. The &lt;strong&gt;Status&lt;/strong&gt; column will display a green checkmark to indicate when the instance is ready for use, as shown in Figure 10.&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;/ol&gt;&lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/qs.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/qs.png?itok=0Y432kTj" width="1440" height="430" alt="The service registry shows that the quarkus-superheroes instance is ready." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 10: The Apicurio Service Registry showing the quarkus-superheroes instance is ready.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Assign service account access to the Service Registry&lt;/h4&gt; &lt;p&gt;Now follow these steps to give the two service accounts access to the instance:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Click the quarkus-superheroes instance.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Access&lt;/strong&gt; tab at the top.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Grant access&lt;/strong&gt; button in the middle of the screen.&lt;/li&gt; &lt;li&gt;In the &lt;strong&gt;Grant access&lt;/strong&gt; dialog that pops up, choose the service account for the &lt;code&gt;event-statistics&lt;/code&gt; service, choose the &lt;strong&gt;Manager&lt;/strong&gt; role, and click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Repeat steps 3 and 4 to grant the &lt;strong&gt;Manager&lt;/strong&gt; role to the &lt;code&gt;rest-fights&lt;/code&gt; service account.&lt;/li&gt; &lt;/ol&gt;&lt;p class="Indent1"&gt;&lt;strong&gt;Note:&lt;/strong&gt; We are giving the service accounts the &lt;strong&gt;Manager&lt;/strong&gt; role instead of the &lt;strong&gt;Viewer&lt;/strong&gt; role because both the &lt;code&gt;rest-fights&lt;/code&gt; and &lt;code&gt;event-statistics&lt;/code&gt; services publish the schema to the registry if it does not already exist.&lt;/p&gt; &lt;h4&gt;&lt;a id="GetServiceRegistryConnectionDetails" name="GetServiceRegistryConnectionDetails"&gt;&lt;/a&gt;Get Service Registry connection details&lt;/h4&gt; &lt;p&gt;Now follow these steps to get the connection details for the Service Registry instance:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Click the &lt;strong&gt;Service Registry Instances&lt;/strong&gt; link on the left-side menu to return to the list of Service Registry instances.&lt;/li&gt; &lt;li&gt;Click the menu on the right of the &lt;code&gt;quarkus-superheros&lt;/code&gt; instance and select &lt;strong&gt;Connection&lt;/strong&gt;, as shown in Figure 11. The screen displays the client connection information for the &lt;code&gt;quarkus-superheroes&lt;/code&gt; instance. &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/connection_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/connection_0.png?itok=UKHSCSm3" width="600" height="185" alt="The line for an instance includes a Connection button at the right." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 11: Get the Service Registry instance connection info.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Copy to clipboard&lt;/strong&gt; buttons for the &lt;strong&gt;Core Registry API&lt;/strong&gt; and the &lt;strong&gt;Token endpoint URL&lt;/strong&gt; fields as shown in Figure 12. Save these URLs in a safe place—they will be needed later when you configure the applications. &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/buttons.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/buttons.png?itok=6mfydiBn" width="600" height="837" alt="The web page for an instance includes buttons for Core Registry API and Token endpoint URL." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 12: The Service Registry instance connection details.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;OpenShift Service Registry provides the following APIs to connect applications to the service:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;The &lt;strong&gt;Core Registry API&lt;/strong&gt; is the most powerful and works with Apicurio client libraries. This is the endpoint that the applications will connect to.&lt;/li&gt; &lt;li&gt;The &lt;strong&gt;Schema Registry compatibility API&lt;/strong&gt; provides compatibility with the Confluent Schema Registry API.&lt;/li&gt; &lt;li&gt;The &lt;strong&gt;CNCF Schema Registry API&lt;/strong&gt; provides compatibility with the CNCF specification.&lt;/li&gt; &lt;/ul&gt;&lt;h3&gt;Creating an Apache Kafka instance&lt;/h3&gt; &lt;p&gt;&lt;a href="https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-streams-for-apache-kafka"&gt;Red Hat OpenShift Streams for Apache Kafka&lt;/a&gt; is a managed cloud service that provides a streamlined developer experience for building, deploying, and scaling new &lt;a href="https://www.redhat.com/en/topics/cloud-native-apps"&gt;cloud-native applications&lt;/a&gt; or modernizing existing systems.&lt;/p&gt; &lt;h4&gt;Create a Kafka instance&lt;/h4&gt; &lt;p&gt;Follow these steps to create a Kafka instance:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;From the &lt;a href="https://console.redhat.com/application-services"&gt;Red Hat OpenShift Application Services dashboard&lt;/a&gt;, expand the &lt;strong&gt;Streams for Apache Kafka&lt;/strong&gt; entry on the left-side menu, and click &lt;strong&gt;Kafka Instances&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Create Kafka Instance&lt;/strong&gt; button in the middle of the screen.&lt;/li&gt; &lt;li&gt;In the &lt;strong&gt;Name&lt;/strong&gt; field, enter &lt;code&gt;quarkus-superheroes&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;In the &lt;strong&gt;Cloud region&lt;/strong&gt; field, select &lt;strong&gt;US East, N. Virginia&lt;/strong&gt;. Trial instances are not available in the EU region.&lt;/li&gt; &lt;li&gt; &lt;p&gt;Click the &lt;strong&gt;Create Instance&lt;/strong&gt; button.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There is limited capacity in the service's free tier. If you get a message saying "Something went wrong or There was a problem processing the request," try again later.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;It might take a few minutes for the instance to create. The &lt;strong&gt;Status&lt;/strong&gt; column will display a green checkmark to indicate when the instance is ready for use, as shown in Figure 13.&lt;/li&gt; &lt;/ol&gt;&lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/ready.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/ready.png?itok=4jAS6i4O" width="1440" height="472" alt="Kafka Instances page shows when an instance is ready in the Status field." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 13: The Kafka instances showing the quarkus-superheroes instance is ready.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Create a Kafka topic&lt;/h4&gt; &lt;p&gt;Now follow these steps to create a topic within the instance:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Click the &lt;code&gt;quarkus-superheroes&lt;/code&gt; instance.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Topics&lt;/strong&gt; item on the top of the &lt;code&gt;quarkus-superheroes&lt;/code&gt; instance dashboard.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Create topic&lt;/strong&gt; button in the middle of the screen.&lt;/li&gt; &lt;li&gt;In the &lt;strong&gt;Topic name&lt;/strong&gt; field, enter &lt;code&gt;fights&lt;/code&gt;, then click the &lt;strong&gt;Next&lt;/strong&gt; button at the bottom of the screen.&lt;/li&gt; &lt;li&gt;In the &lt;strong&gt;Partitions&lt;/strong&gt; field, leave the selection of 1 in place and click the &lt;strong&gt;Next&lt;/strong&gt; button at the bottom of the screen.&lt;/li&gt; &lt;li&gt;On the &lt;strong&gt;Message retention&lt;/strong&gt; screen, leave the defaults in place and click the &lt;strong&gt;Next&lt;/strong&gt; button at the bottom of the screen.&lt;/li&gt; &lt;li&gt;On the &lt;strong&gt;Replicas&lt;/strong&gt; screen, leave the defaults in place and click the &lt;strong&gt;Finish&lt;/strong&gt; button at the bottom of the screen. The topic will be created.&lt;/li&gt; &lt;/ol&gt;&lt;h4&gt;Assign service account access to Kafka&lt;/h4&gt; &lt;p&gt;Now follow these steps to assign proper access to the topic for the two service accounts:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Click the &lt;strong&gt;Access&lt;/strong&gt; item on the top of the &lt;code&gt;quarkus-superheroes&lt;/code&gt; instance dashboard.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Manage access&lt;/strong&gt; button at the top of the &lt;strong&gt;Access&lt;/strong&gt; screen.&lt;/li&gt; &lt;li&gt;In the &lt;strong&gt;Manage access&lt;/strong&gt; pop-up dialog that appears, select the &lt;code&gt;event-statistics&lt;/code&gt; service account from the &lt;strong&gt;Account&lt;/strong&gt; dropdown, then click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Click the down arrow next to the &lt;strong&gt;Add permission&lt;/strong&gt; button at the bottom of the pop-up dialog. Select &lt;strong&gt;Consume from a topic&lt;/strong&gt;, as shown in Figure 14, then click the &lt;strong&gt;Save&lt;/strong&gt; button at the bottom of the dialog. &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/consume.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/consume.png?itok=LES3Fcnf" width="600" height="535" alt="The Manage Access screen lets a service consume from a Kafka topic." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 14: Access management for consuming messages from a Kafka topic.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Manage access&lt;/strong&gt; button at the top of the &lt;strong&gt;Access&lt;/strong&gt; screen.&lt;/li&gt; &lt;li&gt;In the &lt;strong&gt;Manage access&lt;/strong&gt; pop-up dialog that appears, select the &lt;code&gt;rest-fights&lt;/code&gt; service account from the &lt;strong&gt;Account&lt;/strong&gt; dropdown, then click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Click the down arrow next to the &lt;strong&gt;Add permission&lt;/strong&gt; button at the bottom of the pop-up dialog. Select &lt;strong&gt;Produce to a topic&lt;/strong&gt;, as shown in Figure 15, then click the &lt;strong&gt;Save&lt;/strong&gt; button at the bottom of the dialog. &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/produce.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/produce.png?itok=zdPHNZrv" width="600" height="506" alt="The Manage Access screen lets a service produce to a Kafka topic." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 15: Access management for producing messages to a Kafka topic.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;Figure 16 shows the &lt;strong&gt;Access&lt;/strong&gt; tab containing all the Kafka permissions.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/permissions_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/permissions_0.png?itok=nxyQV5mo" width="1371" height="843" alt="The Manage Access screen shows all Kafka permissions." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 16: Access management for all Kafka permissions.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;&lt;a id="GetKafkaConnectionDetails" name="GetKafkaConnectionDetails"&gt;&lt;/a&gt;Get Kafka connection details&lt;/h4&gt; &lt;p&gt;Now follow these steps to get the connection details for the Kafka instance:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Click the &lt;strong&gt;Kafka Instances&lt;/strong&gt; link on the left-side menu to return to the list of Kafka instances.&lt;/li&gt; &lt;li&gt;Click the menu on the right of the &lt;code&gt;quarkus-superheros&lt;/code&gt; instance and select &lt;strong&gt;Connection&lt;/strong&gt;, as shown in Figure 17. This displays the client connection information for the &lt;code&gt;quarkus-superheroes&lt;/code&gt; instance. &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/info.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/info.png?itok=fv-1z74r" width="600" height="204" alt="The line for an instance includes a Connection button that can display client connection information." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 17: Get the Kafka instance connection info.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Copy to clipboard&lt;/strong&gt; buttons for the &lt;strong&gt;Bootstrap server&lt;/strong&gt; and the &lt;strong&gt;Token endpoint URL&lt;/strong&gt; fields, as shown in Figure 18. Save these URLs in a safe place, because they will be needed later when you configure the applications.&lt;/li&gt; &lt;/ol&gt;&lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;strong&gt;Token endpoint URL&lt;/strong&gt; is most likely the same as the service registry &lt;strong&gt;Token endpoint URL&lt;/strong&gt;. Both services use the same identity provider.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/boot.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/boot.png?itok=BrmSAHja" width="676" height="887" alt="The web page for an instance includes buttons for Bootstrap server and Token endpoint URL." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 18: The Kafka instance connection details.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;Connect the application to managed services&lt;/h2&gt; &lt;p&gt;Now, let's connect our applications to the managed services we've created. First, let's get a little disruptive by deleting the existing Apicurio Schema Registry and Kafka workloads.&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Return to the Topology view of the Developer Sandbox, find the &lt;code&gt;apicurio&lt;/code&gt; workload, right-click it, and select &lt;strong&gt;Delete Deployment&lt;/strong&gt; as shown in Figure 19. &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/delete.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/delete.png?itok=gqNj1lig" width="340" height="567" alt="The topology for an instance lets you delete the deployment." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 19: Delete Apicurio Deployment.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;li&gt;When the &lt;strong&gt;Delete Deployment&lt;/strong&gt; confirmation pops up, check the &lt;strong&gt;Delete dependent objects of this resource&lt;/strong&gt; box and click &lt;strong&gt;Delete&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Repeat steps 1 and 2 to delete the &lt;code&gt;fights-kafka&lt;/code&gt; workload as well.&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;Deleting these workloads might cause some of the other workloads to turn red or show errors in their logs, which is expected. Let's now fix the applications by connecting them to the managed services.&lt;/p&gt; &lt;p&gt;Every application has a corresponding &lt;code&gt;ConfigMap&lt;/code&gt; and &lt;code&gt;Secret&lt;/code&gt; containing its configuration and credentials. These two places in the &lt;code&gt;event-statistics&lt;/code&gt; and &lt;code&gt;rest-fights&lt;/code&gt; services need to be updated with the new configuration.&lt;/p&gt; &lt;h3&gt;Connect the event-statistics service&lt;/h3&gt; &lt;p&gt;Follow these steps to connect the &lt;code&gt;event-statistics&lt;/code&gt; service to the managed services:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Click the &lt;strong&gt;ConfigMaps&lt;/strong&gt; link on the left-hand navigation of the sandbox.&lt;/li&gt; &lt;li&gt;Find and click the &lt;code&gt;event-statistics-config&lt;/code&gt; item.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;YAML&lt;/strong&gt; tab at the top of the &lt;code&gt;event-statistics-config&lt;/code&gt; screen.&lt;/li&gt; &lt;li&gt;In the &lt;code&gt;data&lt;/code&gt; section near the bottom, perform the following: &lt;ul&gt;&lt;li&gt;Replace the value of &lt;code&gt;kafka.bootstrap.servers&lt;/code&gt; with the &lt;strong&gt;Bootstrap server&lt;/strong&gt; value you saved earlier from the &lt;a href="#GetKafkaConnectionDetails"&gt;Getting Kafka connection details&lt;/a&gt; section.&lt;/li&gt; &lt;li&gt;Replace the value of &lt;code&gt;mp.messaging.connector.smallrye-kafka.apicurio.registry.url&lt;/code&gt; with the &lt;strong&gt;Core Registry API&lt;/strong&gt; value you saved earlier from the &lt;a href="#GetServiceRegistryConnectionDetails"&gt;Getting service registry connection details&lt;/a&gt; section.&lt;/li&gt; &lt;li&gt; &lt;p&gt;Add the following new key/value combinations:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;mp.messaging.connector.smallrye-kafka.apicurio.auth.service.token.endpoint: &lt;Token endpoint URL&gt; mp.messaging.connector.smallrye-kafka.sasl.jaas.config: org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required oauth.client.id="${CLIENT_ID}" oauth.client.secret="${CLIENT_SECRET}" oauth.token.endpoint.uri="&lt;Token endpoint URL&gt;" ; mp.messaging.connector.smallrye-kafka.security.protocol: SASL_SSL mp.messaging.connector.smallrye-kafka.sasl.mechanism: OAUTHBEARER mp.messaging.connector.smallrye-kafka.sasl.login.callback.handler.class: io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler mp.messaging.connector.smallrye-kafka.apicurio.auth.client.id: ${CLIENT_ID} mp.messaging.connector.smallrye-kafka.apicurio.auth.client.secret: ${CLIENT_SECRET}&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Replace &lt;code&gt;&lt;Token endpoint URL&gt;&lt;/code&gt; with the &lt;strong&gt;Token endpoint URL&lt;/strong&gt; value you saved earlier from either the &lt;a href="#GetServiceRegistryConnectionDetails"&gt;Getting service registry connection details&lt;/a&gt; or &lt;a href="#GetKafkaConnectionDetails"&gt;Getting Kafka connection details&lt;/a&gt; section. The value should be the same in both places.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;When complete, the data section in your &lt;code&gt;event-statistics-config&lt;/code&gt; &lt;code&gt;ConfigMap&lt;/code&gt; should look something like Figure 20.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/configmap_0.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/configmap_0.png?itok=Sxy29CwG" width="600" height="97" alt="The YAML in the event-statistics-config ConfigMap is complete." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 20: The event-statistics-config ConfigMap YAML contents.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Save&lt;/strong&gt; at the bottom of the screen.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Secrets&lt;/strong&gt; link on the left-hand navigation of the sandbox.&lt;/li&gt; &lt;li&gt;Find and click the &lt;code&gt;event-statistics-config-creds&lt;/code&gt; item.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;YAML&lt;/strong&gt; tab at the top of the &lt;code&gt;event-statistics-config-creds&lt;/code&gt; screen.&lt;/li&gt; &lt;li&gt;Add a &lt;code&gt;stringData&lt;/code&gt; element at the bottom and add the following key/value pairs, as shown in Figure 21: &lt;pre&gt; &lt;code&gt;CLIENT_ID: &lt;event-statistics-client-id&gt; CLIENT_SECRET: &lt;event-statistics-client-secret&gt;&lt;/code&gt;&lt;/pre&gt; &lt;ul&gt;&lt;li&gt;Replace &lt;code&gt;&lt;event-statistics-client-id&gt;&lt;/code&gt; with the client ID for the &lt;code&gt;event-statistics&lt;/code&gt; service you created in the &lt;a href="#CreateServiceAccounts"&gt;Creating service accounts&lt;/a&gt; section.&lt;/li&gt; &lt;li&gt;Replace &lt;code&gt;&lt;event-statistics-client-secret&gt;&lt;/code&gt; with the client secret for the &lt;code&gt;event-statistics&lt;/code&gt; service you created in the &lt;a href="#CreateServiceAccounts"&gt;Creating service accounts&lt;/a&gt; section. &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/creds.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/creds.png?itok=qHPrpmXk" width="451" height="57" alt="The YAML for the event-statistics-config-creds shows CLIENT_ID and CLIENT_SECRET." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 21: The event-statistics-config-creds Secret YAML contents.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Save&lt;/strong&gt; at the bottom of the screen.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Topology&lt;/strong&gt; link on the left-hand navigation of the sandbox.&lt;/li&gt; &lt;li&gt;Find and right-click the &lt;code&gt;event-statistics&lt;/code&gt; workload, then select &lt;strong&gt;Start rollout&lt;/strong&gt; as shown in Figure 22. A new instance of the &lt;code&gt;event-statistics&lt;/code&gt; workload will be rolled out with the updated configuration. The rollout should only take a minute or less.&lt;/li&gt; &lt;/ol&gt;&lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/roll.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/roll.png?itok=tw-07o1x" width="460" height="656" alt="The topology for event-statistics allows you to start the rollout." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 22: Start a rollout of the event-statistics service.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Move on and connect the &lt;code&gt;rest-fights&lt;/code&gt; service while the &lt;code&gt;event-statistics&lt;/code&gt; is rolling out.&lt;/p&gt; &lt;h3&gt;Connect the rest-fights service&lt;/h3&gt; &lt;p&gt;Next, follow these steps to connect the &lt;code&gt;rest-fights&lt;/code&gt; service to the managed services, which are nearly identical to the previous steps connecting the &lt;code&gt;event-statistics&lt;/code&gt; service:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Click the &lt;strong&gt;ConfigMaps&lt;/strong&gt; link on the left-hand navigation of the sandbox.&lt;/li&gt; &lt;li&gt;Find and click the &lt;code&gt;rest-fights-config&lt;/code&gt; item.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;YAML&lt;/strong&gt; tab at the top of the &lt;code&gt;rest-fights-config&lt;/code&gt; screen.&lt;/li&gt; &lt;li&gt;In the &lt;code&gt;data&lt;/code&gt; section toward the bottom, perform the following: &lt;ul&gt;&lt;li&gt;Replace the value of &lt;code&gt;kafka.bootstrap.servers&lt;/code&gt; with the &lt;strong&gt;Bootstrap server&lt;/strong&gt; value you saved earlier from the &lt;a href="#GetKafkaConnectionDetails"&gt;Get Kafka connection details&lt;/a&gt; section.&lt;/li&gt; &lt;li&gt;Replace the value of &lt;code&gt;mp.messaging.connector.smallrye-kafka.apicurio.registry.url&lt;/code&gt; with the &lt;strong&gt;Core Registry API&lt;/strong&gt; value you saved earlier from the &lt;a href="#GetServiceRegistryConnectionDetails"&gt;Get service registry connection details&lt;/a&gt; section.&lt;/li&gt; &lt;li&gt; &lt;p&gt;Add the following new key/value combinations:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;mp.messaging.connector.smallrye-kafka.apicurio.auth.service.token.endpoint: &lt;Token endpoint URL&gt; mp.messaging.connector.smallrye-kafka.sasl.jaas.config: org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required oauth.client.id="${CLIENT_ID}" oauth.client.secret="${CLIENT_SECRET}" oauth.token.endpoint.uri="&lt;Token endpoint URL&gt;" ; mp.messaging.connector.smallrye-kafka.security.protocol: SASL_SSL mp.messaging.connector.smallrye-kafka.sasl.mechanism: OAUTHBEARER mp.messaging.connector.smallrye-kafka.sasl.login.callback.handler.class: io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler mp.messaging.connector.smallrye-kafka.apicurio.auth.client.id: ${CLIENT_ID} mp.messaging.connector.smallrye-kafka.apicurio.auth.client.secret: ${CLIENT_SECRET}&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Replace &lt;code&gt;&lt;Token endpoint URL&gt;&lt;/code&gt; with the &lt;strong&gt;Token endpoint URL&lt;/strong&gt; value you saved earlier from either the &lt;a href="#GetServiceRegistryConnectionDetails"&gt;Get service registry connection details&lt;/a&gt; or &lt;a href="#GetKafkaConnectionDetails"&gt;Get Kafka connection details&lt;/a&gt; section. The value should be the same in both.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;When complete, the data section in your &lt;code&gt;rest-fights-config&lt;/code&gt; &lt;code&gt;ConfigMap&lt;/code&gt; should look something like Figure 23.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/rest.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/rest.png?itok=0OcsKLsv" width="600" height="145" alt="The YAML in the rest-fights-config ConfigMap is complete." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 23: The rest-fights-config ConfigMap YAML contents.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Save&lt;/strong&gt; at the bottom of the screen.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Secrets&lt;/strong&gt; link on the left-hand navigation of the sandbox.&lt;/li&gt; &lt;li&gt;Find and click the &lt;code&gt;rest-fights-config-creds&lt;/code&gt; item.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;YAML&lt;/strong&gt; tab at the top of the &lt;code&gt;rest-fights-config-creds&lt;/code&gt; screen.&lt;/li&gt; &lt;li&gt;Add a &lt;code&gt;stringData&lt;/code&gt; element at the bottom and add the following key/value pairs, as shown in Figure 24: &lt;pre&gt; &lt;code&gt;CLIENT_ID: &lt;rest-fights-client-id&gt; CLIENT_SECRET: &lt;rest-fights-client-secret&gt;&lt;/code&gt;&lt;/pre&gt; &lt;ul class="Indent1"&gt;&lt;li&gt;Replace &lt;code&gt;&lt;rest-fights-client-id&gt;&lt;/code&gt; with the client ID for the &lt;code&gt;rest-fights&lt;/code&gt; service you created in the &lt;a href="#CreateServiceAccounts"&gt;Creating service accounts&lt;/a&gt; section.&lt;/li&gt; &lt;li&gt;Replace &lt;code&gt;&lt;rest-fights-client-secret&gt;&lt;/code&gt; with the client secret for the &lt;code&gt;rest-fights&lt;/code&gt; service you created in the &lt;a href="#CreateServiceAccounts"&gt;Creating service accounts&lt;/a&gt; section. &lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/yc.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/yc.png?itok=tbF2E7-G" width="456" height="63" alt="The YAML for the rest-fights-config-creds shows CLIENT_ID and CLIENT_SECRET." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 24: The rest-fights-config-creds Secret YAML contents.&lt;/figcaption&gt;&lt;/figure&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Save&lt;/strong&gt; at the bottom of the screen.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Topology&lt;/strong&gt; link on the left-hand navigation of the sandbox.&lt;/li&gt; &lt;li&gt;Find and right-click the &lt;code&gt;rest-fights&lt;/code&gt; workload, then select &lt;strong&gt;Start rollout&lt;/strong&gt; as shown in Figure 25. A new instance of the &lt;code&gt;rest-fights&lt;/code&gt; workload will be rolled out with the updated configuration. The rollout should take a minute or less.&lt;/li&gt; &lt;/ol&gt;&lt;figure class="rhd-u-has-filter-caption" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/rroll.png" data-featherlight="image"&gt;&lt;img src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/rroll.png?itok=DRCyonD-" width="384" height="584" alt="The topology for rest-fights allows you to start the rollout." loading="lazy" typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 25: Start a rollout of the rest-fights service.&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;Re-examine the application&lt;/h2&gt; &lt;p&gt;The application is ready again when the &lt;code&gt;event-statistics&lt;/code&gt; and &lt;code&gt;rest-fights&lt;/code&gt; services have solid blue circles around their icons. Once these services are ready, go back to the main Superheroes and event statistics UIs and refresh the browser. The application should function just as before, except now the messages are being sent to a managed Kafka instance, and the schema is stored in a managed Service Registry instance.&lt;/p&gt; &lt;p&gt;Go to the &lt;a href="https://console.redhat.com/application-services/service-registry"&gt;&lt;strong&gt;Service Registry Instances&lt;/strong&gt; dashboard&lt;/a&gt; and click the &lt;code&gt;quarkus-superheroes&lt;/code&gt; instance. You should see the same &lt;code&gt;Fight&lt;/code&gt; schema as you did before with the self-deployed Apicurio instance.&lt;/p&gt; &lt;p&gt;Next, go to the &lt;a href="https://console.redhat.com/application-services/streams/kafkas"&gt;Kafka Instances dashboard&lt;/a&gt; and click the &lt;code&gt;quarkus-superheroes&lt;/code&gt; instance. You should see a bunch of metrics around the instance, topics, client connections, message rates, and more.&lt;/p&gt; &lt;h2&gt;What's next?&lt;/h2&gt; &lt;p&gt;Red Hat OpenShift Application Services delivers a streamlined developer experience for building, deploying, and scaling cloud-native applications.&lt;/p&gt; &lt;p&gt;Don't miss your chance to preview some of our new application services. Want to bring some artificial intelligence and machine learning into your applications? Want to put an API management layer in front of all your services? If so, take a look at some of the other managed &lt;a href="https://console.redhat.com/application-services/overview"&gt;OpenShift Application Services&lt;/a&gt;, such as &lt;a href="https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-data-science"&gt;Red Hat OpenShift Data Science&lt;/a&gt; and &lt;a href="https://developers.redhat.com/products/rhoam/getting-started"&gt;Red Hat OpenShift API Management&lt;/a&gt;.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/03/23/quarkus-superheroes-managed-services-save-day" title="Quarkus Superheroes: Managed services save the day"&gt;Quarkus Superheroes: Managed services save the day&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Eric Deandrea</dc:creator><dc:date>2022-03-23T07:00:00Z</dc:date></entry></feed>
